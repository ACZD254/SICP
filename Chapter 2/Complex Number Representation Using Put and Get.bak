#lang sicp
#|Complex Numbers, Complex Representation
@Author - Soumitra Pandit
@Date - 27th September 2023

Complex numbers have two representations and they are ideal to build
or at least practice building additive systems with.
So, let's try that.
|#

;I am trying to really only understand get and put with this
;Exercise. I need to understand how they work.
;But, lets build towards it.

(define (square x) (* x x))

;========================================================================
(define global-array '())

(define (make-entry k v) (list k v))
(define (key entry) (car entry))
(define (value entry) (cadr entry))

(define (put op type item)
  (define (put-helper k array)
    (cond ((null? array) (list(make-entry k item)))
          ((equal? (key (car array)) k) array)
          (else (cons (car array) (put-helper k (cdr array))))))
  (set! global-array (put-helper (list op type) global-array)))

(define (get op type)
  (define (get-helper k array)
    (cond ((null? array) #f)
          ((equal? (key (car array)) k) (value (car array)))
          (else (get-helper k (cdr array)))))
  (get-helper (list op type) global-array))

;==========================================================================================
(define (attach-tag type-tag contents)
  (cons type-tag contents))

(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum -- TYPE-TAG" datum)))

(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum -- CONTENTS" datum)))

(define (install-rectangular-package)
  ;;internal procedures
  (define (real-part z) (car z))
  (define (imaginary-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imaginary-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a))(* r (sin a))))

  ;;interface to the rest of the system
  
  (define (tag x) (attach-tag 'rectangular x))
  
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular
       (lambda (x y) (tag (make-from-real-imag x y))))
  ;Why are we attaching a tag here but not elsewhere?
  (put 'make-from-mag-ang 'rectangular
       (lamnda (r a) (tag (make-from-mag-ang r a))))
  ;I guess its because now is the only time that data
  ;representation plays a role. If we are given a pair,
  ;We need to know if we're suppsosed to interpret it
  ;as real-imaginary or magnitude-angle. So this makes
  ;sense.

  'done)

;There are so many interesting things happening in this program that I need to take a minute
;and digest the nuances. The first thing that comes to mind is '(rectangular).
;What really is the difference between '(rectangular) and 'rectangular?
;And why am I not comfortable with it?

'(rectangular)













  

