#lang sicp
#|Ex 2.29 - Binary Mobile
@Author - Soumitra Pandit
@Date - 7th September 2023

|#

(define (make-mobile left right)
  (list left right))

;I guess I am still struggling with the idea that a list in itself is
;a compound structure. Maybe, I should stop thinking of it in terms of
;nested cons and look at it for what it is - a sequence.
;And then, cons is merely a tool to add an element to the beggining of the
;sequence. Which is pretty neat.
;But, I think I need to experiment just a bit more


(define (make-branch length structure)
  (list length structure))

(define (left-branch binary-mobile)
  (car binary-mobile))

(define (right-branch binary-mobile)
  (cdr binary-mobile))

(define (branch-length branch)
  (car branch))

(define (branch-structure branch)
  (cdr branch))

(define test-list (cons 1 (cons 2 (cons 3 nil)))) ; This is a list
(define test-list2 (list 1 2 3))

(equal? test-list2 test-list)