#lang sicp
(define (last-pair list-1)
  (if (null? (cdr list-1))
      (car list-1)
      (last-pair (cdr list-1))))

(define (but-last list-2)
    (if (null? (cdr list-2))
        (cdr list-2)
        (cons (car list-2) (but-last (cdr list-2)))))

(define (reverse list-1)
  (if (null? list-1)
      list-1
      (cons (last-pair list-1) (reverse (but-last list-1)))))

(define (deep-reverse list1)
  (if (pair? (car list1))
      (cons (reverse (car list1)) (reverse (cdr list1)))
      (reverse list1)))
; I think that I have chosen a bad base case here. will come back to this. 

;This is giving me an answer but not a real list
;So how can I get a list?

(define x (list (list 1 2) (list 3 4)))
(pair? (cdr x))
(pair? x)
(define test-list (list 1 2 3 4 5 6))
(last-pair test-list)
(but-last test-list)
(reverse test-list)
(deep-reverse x)