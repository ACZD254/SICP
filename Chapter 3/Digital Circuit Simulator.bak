#lang sicp
#|A Simulator for Digital Circuits
@Author - Soumitra Pandit
@Date - 25th November 2023

The idea is to build the elements of a digital circuit and have fun while doing so.
Lets see what we can create.

|#

(define a (make-wire))
(define b (make-wire))
(define c (make-wire))
(define d (make-wire))
(define e (make-wire))
(define f (make-wire))


;An Inverter is a primitive function box that inverts the input
;Also, we have a time delay before the input is released.
;Primitive function boxes implement the "forces" by which a change in the signal on one
;wire influences the signals on other wires.
;And thus we have these interfaces
;(get-signal wire) - returns the current value of the signal on the wire.
;(set-signal! wire new-value) - changes the value of the sigal on the wire to the new value
;(add-action! wire procedure-without-arguments) - asserts that the designated procedure should be run whenever the signal on the wire changes value
;Okay so the last one is quite interesting. So we have to somehow keep a watchful eye on the state of a variable.
;How do we do that, exactly?
;And what about conflicts? What if the value is changed when we are in the refactory period?
(define (inverter input output)
  (define (invert-input)
    ;Becuase I guess we need a wrapper
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay 
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-inpuit)
  'inverted)

(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value (logical-and (get-signal a1)
                                  (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'and)

(define (or-gate a1 a2 output)
  (define (or-gate-procedure)
    (let ((new-value (logical-or (get-signal a1)
                                 (tget-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal output new-value)))))
  (add-action! a1 or-gate-procedure)
  (add-action! a2 or-gate-procedure)
  'or)